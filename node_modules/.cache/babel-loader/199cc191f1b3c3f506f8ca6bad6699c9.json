{"ast":null,"code":"var _jsxFileName = \"/Users/MattAguiluz/sei-bromeliad/projects/Project4_neon-pyramid/the-neon-pyramid-frontend/the-neon-pyramid-frontend/neon-pyramid/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport Register from './components/Register';\nimport Login from './components/Login';\nimport Logo from './components/Logo';\nimport Nav from './components/Nav';\nimport Menu from './components/Menu'; // import Dish from './components/Dish';\n\nimport Order from './components/Order'; // import Payment from './components/Payment';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet baseUrl = process.env.REACT_APP_BASEURL;\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.register = async e => {\n      e.preventDefault();\n\n      try {\n        const response = await fetch(baseUrl + '/users/register', {\n          method: 'POST',\n          body: JSON.stringify({\n            email: e.target.email.value,\n            username: e.target.username.value,\n            password: e.target.password.value,\n            phone_num: e.target.phone_num.value,\n            address: e.target.address.value,\n            cc_num: '',\n            cc_exp: '',\n            cc_sec_code: '' // cc_num: e.target.cc_num.value,\n            // cc_exp: e.target.cc_exp.value,\n            // cc_sec_code: e.target.cc_sec_code.value,\n\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (response.status === 200) {\n          this.getDishes(); // this.getOrders()\n        }\n      } catch (err) {\n        console.log('Error => ', err);\n        console.log('ðŸ˜– register failed ðŸ˜–');\n      }\n    };\n\n    this.loginUser = async e => {\n      e.preventDefault();\n      const loginBody = {\n        username: e.target.username.value,\n        password: e.target.password.value\n      };\n\n      try {\n        const response = await fetch(baseUrl + '/users/login', {\n          method: 'POST',\n          body: JSON.stringify(loginBody),\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        });\n        console.log(response);\n        console.log('BODY: ', response.body);\n\n        if (response.status === 200) {\n          this.getDishes(); // this.getOrders()\n\n          console.log('ðŸ¥³ login successful! ðŸ¥³');\n          this.setState({\n            // need to populate the rest of state for users\n            username: e.target.username.value,\n            password: e.target.password.value,\n            userLoggedIn: true,\n            loginOpen: false\n          });\n          this.newOrder();\n        }\n      } catch (err) {\n        console.log('Error => ', err);\n        console.log('ðŸ˜– login failed ðŸ˜–');\n      }\n    };\n\n    this.logoutUser = () => {\n      console.log('hit logout button');\n      fetch(baseUrl + '/users/logout', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      }).then(res => {\n        console.log(res.status);\n        console.log('ðŸ§¨ logout successful! ðŸ§¨');\n        this.setState({\n          userLoggedIn: false,\n          orderOpen: false\n        });\n      });\n      console.log(this.state);\n    };\n\n    this.getDishes = () => {\n      console.log('hit getDishes');\n      fetch(baseUrl + '/dishes/', {\n        credentials: 'include'\n      }).then(res => {\n        if (res.status === 200) {\n          console.log('ðŸ¥¡ fetch index dishes successful! ðŸ¥¡');\n          return res.json();\n        } else {\n          console.log('fetch index dishes failed...ðŸ’£');\n          return [];\n        }\n      }).then(data => {\n        this.setState({\n          dishes: data.data\n        });\n        console.log('new data: ' + JSON.stringify(data.data));\n      });\n    };\n\n    this.getOrderedDishesByOrderId = order_id => {\n      console.log('hit getOrderedDishesByOrderId');\n      console.log('order id: ' + order_id);\n    };\n\n    this.newOrder = async () => {\n      console.log('hit newOrder');\n\n      try {\n        const response = await fetch(baseUrl + '/orders/', {\n          method: 'POST',\n          body: JSON.stringify({\n            total: 0.0\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        });\n        console.log(response.status);\n\n        if (response.status === 201) {\n          console.log('new order created!');\n          const newOrder = await response.json();\n          console.log('new order :' + newOrder);\n          const copyOrders = [...this.state.orders];\n          copyOrders.push(newOrder);\n          this.setState({\n            orders: copyOrders,\n            currentOrderId: newOrder.data.id,\n            orderOpen: true\n          });\n          console.log('newOrder: ' + JSON.stringify(newOrder));\n          console.log('newOrderID: ' + JSON.stringify(newOrder.data.id));\n        }\n      } catch (err) {\n        console.log('Error -> ', err);\n        console.log('order not created...');\n      }\n    };\n\n    this.changeDishQty = (ordered_dish_id, amount) => {\n      console.log('ordered_dish id:' + ordered_dish_id);\n      fetch(baseUrl + '/ordered_dishes/' + ordered_dish_id, {\n        method: 'PUT' // \n\n      }).then(res => {});\n    };\n\n    this.addDishToOrder = (order_id, dish_id) => {\n      // hit PUT route with IDs \n      console.log('order id:', order_id, 'dish id:', dish_id);\n      console.log('orderedDishes: ' + this.state.orderedDishes);\n      fetch(baseUrl + '/ordered_dishes/' + dish_id + '/' + order_id + '/', {\n        method: 'POST'\n      }).then(res => {\n        if (res.status === 200) {\n          console.log('dish added to order!');\n          return res.json();\n        } else {\n          console.log('dish was not added...');\n          return [];\n        }\n      }) // return data.data\n      .then(data => {\n        console.log(data);\n        this.setState({\n          orderedDishes: data.data\n        });\n      });\n    };\n\n    this.toggleRegisterForm = () => {\n      this.setState({\n        registerOpen: !this.state.registerOpen\n      }, () => console.log('registerOpen after set state: ' + this.state.registerOpen));\n      console.log('toggleRegisterForm clicked');\n    };\n\n    this.toggleLoginForm = () => {\n      this.setState({\n        loginOpen: !this.state.loginOpen\n      }, () => console.log('loginOpen after set state: ' + this.state.loginOpen));\n      console.log('toggleLoginForm clicked');\n    };\n\n    this.toggleOrderForm = () => {\n      this.setState({\n        orderOpen: !this.state.orderOpen\n      }, () => console.log('orderOpen after set state: ' + this.state.orderOpen));\n      console.log('toggleOrderForm clicked');\n    };\n\n    this.state = {\n      username: '',\n      password: '',\n      email: '',\n      phone_num: '',\n      address: '',\n      payment_info: {},\n      userLoggedIn: false,\n      registerOpen: false,\n      loginOpen: false,\n      orderOpen: false,\n      paymentOpen: false,\n      orders: [],\n      dishes: [],\n      currentOrderId: null,\n      orderedDishes: [],\n      orderedDishesTotal: 0,\n      orderEmpty: true,\n      orderedDishQty: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getDishes();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {\n        toggleRegisterForm: this.toggleRegisterForm,\n        registerOpen: this.state.registerOpen,\n        toggleLoginForm: this.toggleLoginForm,\n        loginOpen: this.state.loginOpen,\n        toggleOrderForm: this.toggleOrderForm,\n        orderOpen: this.state.orderOpen,\n        logoutUser: this.logoutUser,\n        userLoggedIn: this.state.userLoggedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Register, {\n        register: this.register,\n        registerOpen: this.state.registerOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Login, {\n        loginUser: this.loginUser,\n        loginOpen: this.state.loginOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-container\",\n        children: [/*#__PURE__*/_jsxDEV(Menu, {\n          dishes: this.state.dishes,\n          currentOrderId: this.state.currentOrderId,\n          addDishToOrder: this.addDishToOrder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Order, {\n          orderOpen: this.state.orderOpen,\n          currentOrder: this.state.currentOrder,\n          orderedDishes: this.state.orderedDishes,\n          orderedDishQty: this.state.orderedDishQty // orderedDishesTotal={this.state.orderedDishesTotal}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/MattAguiluz/sei-bromeliad/projects/Project4_neon-pyramid/the-neon-pyramid-frontend/the-neon-pyramid-frontend/neon-pyramid/src/App.js"],"names":["React","Component","Register","Login","Logo","Nav","Menu","Order","baseUrl","process","env","REACT_APP_BASEURL","App","constructor","register","e","preventDefault","response","fetch","method","body","JSON","stringify","email","target","value","username","password","phone_num","address","cc_num","cc_exp","cc_sec_code","headers","status","getDishes","err","console","log","loginUser","loginBody","credentials","setState","userLoggedIn","loginOpen","newOrder","logoutUser","then","res","orderOpen","state","json","data","dishes","getOrderedDishesByOrderId","order_id","total","copyOrders","orders","push","currentOrderId","id","changeDishQty","ordered_dish_id","amount","addDishToOrder","dish_id","orderedDishes","toggleRegisterForm","registerOpen","toggleLoginForm","toggleOrderForm","payment_info","paymentOpen","orderedDishesTotal","orderEmpty","orderedDishQty","componentDidMount","render","currentOrder"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport Register from './components/Register';\nimport Login from './components/Login';\nimport Logo from './components/Logo';\nimport Nav from './components/Nav';\nimport Menu from './components/Menu';\n// import Dish from './components/Dish';\nimport Order from './components/Order';\n// import Payment from './components/Payment';\n\n\nlet baseUrl = process.env.REACT_APP_BASEURL\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      username: '',\n      password: '',\n      email: '',\n      phone_num: '',\n      address: '',\n      payment_info: {},\n      userLoggedIn: false,\n      registerOpen: false,\n      loginOpen: false,\n      orderOpen: false,\n      paymentOpen: false,\n      orders: [],\n      dishes: [],\n      currentOrderId: null,\n      orderedDishes: [],\n      orderedDishesTotal: 0,\n      orderEmpty: true,\n      orderedDishQty: 0,\n    }\n  }\n\n  register = async (e) => {\n    e.preventDefault()\n    try{\n      const response = await fetch(baseUrl + '/users/register', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: e.target.email.value,\n          username: e.target.username.value,\n          password: e.target.password.value,\n          phone_num: e.target.phone_num.value,\n          address: e.target.address.value,\n          cc_num: '',\n          cc_exp: '',\n          cc_sec_code: '',\n          // cc_num: e.target.cc_num.value,\n          // cc_exp: e.target.cc_exp.value,\n          // cc_sec_code: e.target.cc_sec_code.value,\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      if (response.status === 200) {\n        this.getDishes()\n        // this.getOrders()\n      }\n    }\n    catch(err) {\n      console.log('Error => ', err)\n      console.log('ðŸ˜– register failed ðŸ˜–')\n    }\n  }\n\n  loginUser = async (e) => {\n    e.preventDefault()\n    const loginBody = {\n      username: e.target.username.value,\n      password: e.target.password.value,\n    }\n\n    try {\n      const response = await fetch(baseUrl + '/users/login', {\n        method: 'POST',\n        body: JSON.stringify(loginBody),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      })\n\n      console.log(response)\n      console.log('BODY: ', response.body)\n\n      if(response.status === 200){\n        this.getDishes()\n        // this.getOrders()\n        console.log('ðŸ¥³ login successful! ðŸ¥³')\n        this.setState({\n          // need to populate the rest of state for users\n          username: e.target.username.value,\n          password: e.target.password.value,\n          userLoggedIn: true,\n          loginOpen: false,\n          })\n        this.newOrder()\n      }\n    }\n    catch(err){\n      console.log('Error => ', err)\n      console.log('ðŸ˜– login failed ðŸ˜–')\n    }\n  }\n\n  logoutUser = () => {\n    console.log('hit logout button')\n    fetch(baseUrl + '/users/logout', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    })\n    .then(res => {\n      console.log(res.status)\n      console.log('ðŸ§¨ logout successful! ðŸ§¨')\n      this.setState({\n        userLoggedIn: false,\n        orderOpen: false,\n      })\n    })\n    console.log(this.state)\n  }\n\n  getDishes = () => {\n    console.log('hit getDishes')\n    fetch(baseUrl + '/dishes/', {\n      credentials: 'include'\n    })\n    .then (res => {\n      if(res.status === 200) {\n        console.log('ðŸ¥¡ fetch index dishes successful! ðŸ¥¡')\n        return res.json()\n      } else {\n        console.log('fetch index dishes failed...ðŸ’£')\n        return[]\n      }\n    })\n    .then(data => {\n      this.setState({\n        dishes: data.data\n      })\n      console.log('new data: ' + JSON.stringify(data.data))\n    })\n  }\n  \n  getOrderedDishesByOrderId = (order_id) => {\n    console.log(('hit getOrderedDishesByOrderId'))\n    console.log('order id: ' + order_id)\n\n  }\n\n  newOrder = async () => {\n    console.log('hit newOrder')\n\n    try{\n      const response = await fetch(baseUrl + '/orders/', {\n        method: 'POST',\n        body: JSON.stringify({\n          total: 0.0,\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }, \n        credentials: 'include'\n      })\n      \n      console.log(response.status)\n\n      if(response.status === 201){\n        console.log('new order created!')\n        const newOrder = await response.json()\n        console.log('new order :' + newOrder)\n        const copyOrders = [...this.state.orders]\n        copyOrders.push(newOrder)\n        this.setState({\n          orders: copyOrders,\n          currentOrderId: newOrder.data.id,\n          orderOpen: true,\n        })\n        console.log('newOrder: ' + JSON.stringify(newOrder))\n        console.log('newOrderID: ' + JSON.stringify(newOrder.data.id))\n      }\n    }\n    catch(err){\n      console.log('Error -> ', err)\n      console.log('order not created...')\n    }\n\n  }\n\n  changeDishQty = (ordered_dish_id, amount) => {\n    console.log('ordered_dish id:' + ordered_dish_id)\n    fetch(baseUrl + '/ordered_dishes/' + ordered_dish_id, {\n      method: 'PUT',\n      // \n    })\n    .then(res => {\n\n\n    })\n  }\n\n  addDishToOrder =(order_id, dish_id)=> {\n    // hit PUT route with IDs \n    console.log( 'order id:',order_id, 'dish id:',dish_id)\n    console.log('orderedDishes: ' + this.state.orderedDishes)\n    fetch(baseUrl + '/ordered_dishes/' + dish_id + '/' + order_id + '/', {\n      method: 'POST',\n    })\n    .then(res => {\n      if(res.status === 200){\n        console.log('dish added to order!')\n        return res.json()\n      } else {\n        console.log('dish was not added...')\n        return []\n      }\n    })\n    // return data.data\n    .then(data => {\n      console.log(data)\n      this.setState({\n        orderedDishes: data.data,\n      })\n    })\n  }\n\n  toggleRegisterForm = () => {\n    this.setState({\n      registerOpen: !this.state.registerOpen,\n    }, ()=>console.log('registerOpen after set state: ' + this.state.registerOpen)\n    )\n    console.log('toggleRegisterForm clicked')\n  }\n\n  toggleLoginForm = () => {\n    this.setState({\n      loginOpen: !this.state.loginOpen,\n    }, ()=>console.log('loginOpen after set state: ' + this.state.loginOpen)\n    )\n    console.log('toggleLoginForm clicked')\n  }\n  \n  toggleOrderForm = () => {\n    this.setState({\n      orderOpen: !this.state.orderOpen,\n    }, ()=>console.log('orderOpen after set state: ' + this.state.orderOpen)\n    )\n    console.log('toggleOrderForm clicked')\n  }\n\n  componentDidMount(){\n    this.getDishes()\n  }\n  \n  render(){\n    \n    return (\n      <div className=\"App\">\n      <Nav \n        toggleRegisterForm={this.toggleRegisterForm}\n        registerOpen={this.state.registerOpen}\n        toggleLoginForm={this.toggleLoginForm}\n        loginOpen={this.state.loginOpen}\n        toggleOrderForm={this.toggleOrderForm}\n        orderOpen={this.state.orderOpen}\n        logoutUser={this.logoutUser}\n        userLoggedIn={this.state.userLoggedIn}\n      />\n      <Logo />\n\n      <Register \n        register={this.register}\n        registerOpen={this.state.registerOpen}\n      />\n      <Login \n        loginUser={this.loginUser}\n        loginOpen={this.state.loginOpen}\n      />\n\n      <div className=\"bottom-container\">\n        <Menu \n          dishes = {this.state.dishes}\n          currentOrderId = {this.state.currentOrderId}\n          addDishToOrder = {this.addDishToOrder}\n        />\n        <Order \n        orderOpen={this.state.orderOpen}\n        currentOrder={this.state.currentOrder}\n        orderedDishes={this.state.orderedDishes}\n        orderedDishQty={this.state.orderedDishQty}\n        // orderedDishesTotal={this.state.orderedDishesTotal}\n        />\n      </div>\n        {/* {this.paymentOpen &&  */}\n        {/* <Payment /> */}\n        {/* } */}\n    </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}