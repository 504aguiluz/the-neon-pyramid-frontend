{"ast":null,"code":"var _jsxFileName = \"/Users/MattAguiluz/sei-bromeliad/projects/Project4_neon-pyramid/the-neon-pyramid-frontend/the-neon-pyramid-frontend/neon-pyramid/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react'; // import { Alert } from 'react-alert';\n\nimport Register from './components/Register';\nimport Login from './components/Login';\nimport Logo from './components/Logo';\nimport Nav from './components/Nav';\nimport Menu from './components/Menu';\nimport Order from './components/Order';\nimport Payment from './components/Payment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet baseUrl = process.env.REACT_APP_BASEURL;\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.toggleRelativeDefaults = () => {\n      if (this.state.loginOpen) {\n        this.setState({\n          logoOpen: false,\n          menuOpen: false,\n          registerOpen: false\n        });\n      }\n    };\n\n    this.register = async e => {\n      e.preventDefault();\n\n      try {\n        const response = await fetch(baseUrl + '/users/register', {\n          method: 'POST',\n          body: JSON.stringify({\n            email: e.target.email.value,\n            username: e.target.username.value,\n            password: e.target.password.value,\n            phone_num: e.target.phone_num.value,\n            address: e.target.address.value,\n            cc_num: '',\n            cc_exp: '',\n            cc_sec_code: ''\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (response.status === 201) {\n          this.getDishes();\n          console.log('🥳 register successful! 🥳');\n          this.setState({\n            registerOpen: false,\n            loginOpen: true\n          });\n        } else {}\n      } catch (err) {\n        console.log('Error => ', err);\n        console.log('😖 register failed 😖');\n      }\n    };\n\n    this.loginUser = async e => {\n      e.preventDefault();\n      const loginBody = {\n        username: e.target.username.value,\n        password: e.target.password.value\n      };\n\n      try {\n        const response = await fetch(baseUrl + '/users/login', {\n          method: 'POST',\n          body: JSON.stringify(loginBody),\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        });\n        console.log(response);\n        console.log('BODY: ', response.body);\n\n        if (response.status === 200) {\n          this.getOrders();\n          this.getDishes();\n          console.log('🥳 login successful! 🥳');\n          this.setState({\n            // need to populate the rest of state for users\n            username: e.target.username.value,\n            password: e.target.password.value,\n            userLoggedIn: true,\n            loginOpen: false\n          });\n          this.toggleLogo();\n          this.newOrder();\n        } else {\n          alert('☠️ Incorrect username/login... ☠️ Please try again or register before logging in.');\n          console.log('😖 login failed 😖');\n        }\n      } catch (err) {\n        alert('login unsuccessful');\n        console.log('Error => ', err);\n        console.log('😖 login failed 😖');\n      }\n    };\n\n    this.logoutUser = () => {\n      console.log('hit logout button');\n      fetch(baseUrl + '/users/logout', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      }).then(res => {\n        console.log(res.status);\n        console.log('🧨 logout successful! 🧨');\n        this.setState({\n          userLoggedIn: false,\n          orderOpen: false\n        });\n      });\n      console.log(this.state);\n    };\n\n    this.getDishes = () => {\n      console.log('hit getDishes');\n      fetch(baseUrl + '/dishes/', {\n        credentials: 'include'\n      }).then(res => {\n        if (res.status === 200) {\n          console.log('🥡 fetch index dishes successful! 🥡');\n          return res.json();\n        } else {\n          console.log('fetch index dishes failed...💣');\n          return [];\n        }\n      }).then(data => {\n        this.setState({\n          dishes: data.data\n        }); // console.log('new data: ' + JSON.stringify(data.data))\n      });\n    };\n\n    this.getOrders = () => {\n      console.log('hit getOrders');\n      fetch(baseUrl + '/orders/', {\n        credentials: 'include'\n      }).then(res => {\n        if (res.status === 200) {\n          console.log('📝 fetch index orders successful! 📝');\n          return res.json();\n        } else {\n          console.log('fetch index orders failed...💣');\n          return [];\n        }\n      }).then(data => {\n        this.setState({\n          orders: data.data\n        });\n        console.log('new data: ' + JSON.stringify(data.data));\n      });\n    };\n\n    this.newOrder = async () => {\n      console.log('hit newOrder');\n\n      try {\n        const response = await fetch(baseUrl + '/orders/', {\n          method: 'POST',\n          body: JSON.stringify({\n            total: 0.0\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        });\n        console.log(response.status);\n\n        if (response.status === 201) {\n          console.log('new order created!');\n          const newOrder = await response.json();\n          console.log('new order :' + newOrder);\n          this.getOrders();\n          const copyOrders = [...this.state.orders];\n          copyOrders.push(newOrder);\n          this.setState({\n            orders: copyOrders,\n            currentOrderId: newOrder.data.id,\n            orderOpen: true\n          });\n          console.log('newOrder: ' + JSON.stringify(newOrder));\n          console.log('newOrderID: ' + JSON.stringify(newOrder.data.id));\n        }\n      } catch (err) {\n        console.log('Error -> ', err);\n        console.log('order not created...');\n      }\n    };\n\n    this.sumOrderedDishPrices = () => {\n      const dishes = this.state.orderedDishes;\n      const total = dishes.reduce((total, obj) => obj.dish.price + total, 0);\n      console.log(total);\n      this.setState({\n        currentOrderTotal: total\n      });\n    };\n\n    this.subOrderedDishPrices = id => {\n      const findIndex = this.state.orderedDishes.findIndex(orderedDish => orderedDish.id === id);\n      const orderedDish = this.state.orderedDishes[findIndex];\n      console.log(`orderedDish.dish.price: ${JSON.stringify(orderedDish.dish.price)}`);\n      const currentTotal = this.state.currentOrderTotal;\n      const newTotal = currentTotal - orderedDish.dish.price;\n      this.setState({\n        currentOrderTotal: newTotal\n      });\n    };\n\n    this.addDishToOrder = (order_id, dish_id) => {\n      console.log('order id:', order_id, 'dish id:', dish_id);\n\n      if (!this.state.userLoggedIn) {\n        alert('❌ You must log in first to create an order. ❌');\n        this.setState({\n          loginOpen: true\n        });\n      } else {\n        fetch(baseUrl + '/ordered_dishes/' + order_id + '/' + dish_id + '/', {\n          method: 'POST',\n          credentials: 'include'\n        }).then(res => {\n          if (res.status === 200) {\n            console.log('dish added to order!');\n            return res.json();\n          } else {\n            console.log('dish was not added...');\n            return [];\n          }\n        }).then(data => {\n          console.log(data);\n          const copyOrderedDishes = [...this.state.orderedDishes, data.data];\n          console.log(copyOrderedDishes[copyOrderedDishes.length - 1]);\n          this.setState({\n            currentOrderId: order_id,\n            orderedDishes: copyOrderedDishes,\n            currentOrderedDishId: copyOrderedDishes[copyOrderedDishes.length - 1].id,\n            currentOrderTotal: null\n          });\n        }).then(() => {\n          this.sumOrderedDishPrices();\n        });\n      }\n    };\n\n    this.updateOrderedDish = (order_id, dish_id, ordered_dish_id) => {\n      console.log(`order id: ${order_id}, dish id: ${dish_id}, ordered_dish_id: ${ordered_dish_id}`);\n      fetch(baseUrl + '/ordered_dishes/' + order_id + '/' + dish_id + '/' + ordered_dish_id, {\n        method: 'PUT',\n        credentials: 'include'\n      }).then(res => {\n        if (res.status === 200) {\n          console.log('ordered dish updated!');\n          return res.json();\n        } else {\n          console.log('dish was not updated...');\n          return [];\n        }\n      }).then(data => {\n        const updatedOrderedDish = data.data;\n        console.log(updatedOrderedDish);\n        const findIndex = this.state.orderedDishes.findIndex(orderedDish => orderedDish.id === updatedOrderedDish.id);\n        const copyOrderedDishes = [...this.state.orderedDishes];\n        copyOrderedDishes[findIndex] = updatedOrderedDish;\n        this.setState({\n          orderedDishes: copyOrderedDishes\n        });\n      });\n    };\n\n    this.deleteOrderedDish = id => {\n      console.log(id);\n      this.subOrderedDishPrices(id);\n      fetch(baseUrl + '/ordered_dishes/' + id + '/', {\n        method: 'DELETE'\n      }).then(res => {\n        console.log(res);\n        const findIndex = this.state.orderedDishes.findIndex(orderedDish => orderedDish.id === id);\n        const copyOrderedDishes = [...this.state.orderedDishes];\n        copyOrderedDishes.splice(findIndex, 1);\n        this.setState({\n          orderedDishes: copyOrderedDishes\n        });\n      });\n    };\n\n    this.toggleLogo = () => {\n      this.setState({\n        logoOpen: !this.state.logoOpen\n      }, () => console.log('logoOpen after set state: ' + this.state.logoOpen));\n      console.log('toggleLogo clicked');\n    };\n\n    this.toggleRegisterForm = () => {\n      this.setState({\n        registerOpen: !this.state.registerOpen,\n        loginOpen: false\n      }, () => console.log('registerOpen after set state: ' + this.state.registerOpen));\n      console.log('toggleRegisterForm clicked');\n    };\n\n    this.toggleLoginForm = () => {\n      this.setState({\n        loginOpen: !this.state.loginOpen\n      }, () => console.log('loginOpen after set state: ' + this.state.loginOpen));\n      console.log('toggleLoginForm clicked');\n    };\n\n    this.toggleOrderForm = () => {\n      this.setState({\n        orderOpen: !this.state.orderOpen\n      }, () => console.log('orderOpen after set state: ' + this.state.orderOpen));\n      console.log('toggleOrderForm clicked');\n    };\n\n    this.togglePaymentForm = () => {\n      this.setState({\n        paymentOpen: !this.state.paymentOpen\n      }, () => console.log('paymentOpen after set state: ' + this.state.paymentOpen));\n      console.log('togglePaymentForm clicked');\n    };\n\n    this.checkout = () => {\n      console.log('hit checkout button!');\n    };\n\n    this.state = {\n      username: '',\n      password: '',\n      email: '',\n      phone_num: '',\n      address: '',\n      cc_num: '',\n      cc_exp: '',\n      cc_sec_code: '',\n      firstName: '',\n      lastName: '',\n      userLoggedIn: false,\n      logoOpen: true,\n      registerOpen: false,\n      loginOpen: false,\n      menuOpen: true,\n      orderOpen: false,\n      paymentOpen: false,\n      orders: [],\n      dishes: [],\n      currentOrderId: null,\n      orderedDishes: [],\n      orderEmpty: true,\n      currentOrderedDishId: null,\n      currentOrderTotal: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getDishes();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Payment, {\n        currentOrderTotal: this.state.currentOrderTotal,\n        paymentOpen: this.state.paymentOpen,\n        togglePaymentForm: this.togglePaymentForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Nav, {\n        toggleRegisterForm: this.toggleRegisterForm,\n        registerOpen: this.state.registerOpen,\n        toggleLoginForm: this.toggleLoginForm,\n        loginOpen: this.state.loginOpen,\n        toggleOrderForm: this.toggleOrderForm,\n        orderOpen: this.state.orderOpen,\n        logoutUser: this.logoutUser,\n        userLoggedIn: this.state.userLoggedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {\n        logoOpen: this.state.logoOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Register, {\n        register: this.register,\n        registerOpen: this.state.registerOpen,\n        toggleRegisterForm: this.toggleRegisterForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Login, {\n        loginUser: this.loginUser,\n        loginOpen: this.state.loginOpen,\n        registerOpen: this.state.registerOpen,\n        toggleRegisterForm: this.toggleRegisterForm,\n        toggleLogo: this.toggleLogo,\n        toggleLoginForm: this.toggleLoginForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-container\",\n        children: [/*#__PURE__*/_jsxDEV(Menu, {\n          dishes: this.state.dishes,\n          currentOrderId: this.state.currentOrderId,\n          addDishToOrder: this.addDishToOrder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Order, {\n          username: this.state.username,\n          orderOpen: this.state.orderOpen,\n          orderedDishes: this.state.orderedDishes,\n          orderedDishQty: this.state.orderedDishQty,\n          currentOrderId: this.state.currentOrderId,\n          orders: this.state.orders,\n          currentOrderTotal: this.state.currentOrderTotal,\n          deletedOrderedDish: this.deleteOrderedDish,\n          togglePaymentForm: this.togglePaymentForm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/MattAguiluz/sei-bromeliad/projects/Project4_neon-pyramid/the-neon-pyramid-frontend/the-neon-pyramid-frontend/neon-pyramid/src/App.js"],"names":["React","Component","Register","Login","Logo","Nav","Menu","Order","Payment","baseUrl","process","env","REACT_APP_BASEURL","App","constructor","toggleRelativeDefaults","state","loginOpen","setState","logoOpen","menuOpen","registerOpen","register","e","preventDefault","response","fetch","method","body","JSON","stringify","email","target","value","username","password","phone_num","address","cc_num","cc_exp","cc_sec_code","headers","status","getDishes","console","log","err","loginUser","loginBody","credentials","getOrders","userLoggedIn","toggleLogo","newOrder","alert","logoutUser","then","res","orderOpen","json","data","dishes","orders","total","copyOrders","push","currentOrderId","id","sumOrderedDishPrices","orderedDishes","reduce","obj","dish","price","currentOrderTotal","subOrderedDishPrices","findIndex","orderedDish","currentTotal","newTotal","addDishToOrder","order_id","dish_id","copyOrderedDishes","length","currentOrderedDishId","updateOrderedDish","ordered_dish_id","updatedOrderedDish","deleteOrderedDish","splice","toggleRegisterForm","toggleLoginForm","toggleOrderForm","togglePaymentForm","paymentOpen","checkout","firstName","lastName","orderEmpty","componentDidMount","render","orderedDishQty"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\n// import { Alert } from 'react-alert';\nimport Register from './components/Register';\nimport Login from './components/Login';\nimport Logo from './components/Logo';\nimport Nav from './components/Nav';\nimport Menu from './components/Menu';\nimport Order from './components/Order';\nimport Payment from './components/Payment';\n\n\nlet baseUrl = process.env.REACT_APP_BASEURL\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      username: '',\n      password: '',\n      email: '',\n      phone_num: '',\n      address: '',\n      cc_num: '',\n      cc_exp:  '',\n      cc_sec_code: '',\n      firstName: '',\n      lastName: '',\n      userLoggedIn: false,\n      logoOpen: true,\n      registerOpen: false,\n      loginOpen: false,\n      menuOpen: true,\n      orderOpen: false,\n      paymentOpen: false,\n      orders: [],\n      dishes: [],\n      currentOrderId: null,\n      orderedDishes: [],\n      orderEmpty: true,\n      currentOrderedDishId: null,\n      currentOrderTotal: 0,\n    }\n  }\n\n  toggleRelativeDefaults = () => {\n    if(this.state.loginOpen){\n      this.setState({\n        logoOpen:false,\n        menuOpen: false,\n        registerOpen: false,\n      })\n    }\n  }\n  \n\n  register = async (e) => {\n    e.preventDefault()\n    try{\n      const response = await fetch(baseUrl + '/users/register', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: e.target.email.value,\n          username: e.target.username.value,\n          password: e.target.password.value,\n          phone_num: e.target.phone_num.value,\n          address: e.target.address.value,\n          cc_num: '',\n          cc_exp: '',\n          cc_sec_code: '',\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n\n      if (response.status === 201) {\n        this.getDishes()\n        console.log('🥳 register successful! 🥳')\n        this.setState({\n          registerOpen: false,\n          loginOpen: true,\n          })\n      } else {\n\n      }\n    }\n    catch(err) {\n      console.log('Error => ', err)\n      console.log('😖 register failed 😖')\n    }\n  }\n  \n  loginUser = async (e) => {\n    e.preventDefault()\n    const loginBody = {\n      username: e.target.username.value,\n      password: e.target.password.value,\n    }\n    \n    try {\n      const response = await fetch(baseUrl + '/users/login', {\n        method: 'POST',\n        body: JSON.stringify(loginBody),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      })\n      \n      console.log(response)\n      console.log('BODY: ', response.body)\n      \n      if(response.status === 200){\n        this.getOrders()\n        this.getDishes()\n        console.log('🥳 login successful! 🥳')\n        this.setState({\n          // need to populate the rest of state for users\n          username: e.target.username.value,\n          password: e.target.password.value,\n          userLoggedIn: true,\n          loginOpen: false,\n          })\n        this.toggleLogo()\n        this.newOrder()\n      } else {\n        alert('☠️ Incorrect username/login... ☠️ Please try again or register before logging in.')\n        console.log('😖 login failed 😖')\n      }\n    }\n    catch(err){\n      alert('login unsuccessful')\n      console.log('Error => ', err)\n      console.log('😖 login failed 😖')\n    }\n  }\n\n  logoutUser = () => {\n    console.log('hit logout button')\n    fetch(baseUrl + '/users/logout', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    })\n    .then(res => {\n      console.log(res.status)\n      console.log('🧨 logout successful! 🧨')\n      this.setState({\n        userLoggedIn: false,\n        orderOpen: false,\n      })\n    })\n    console.log(this.state)\n  }\n\n  getDishes = () => {\n    console.log('hit getDishes')\n    fetch(baseUrl + '/dishes/', {\n      credentials: 'include'\n    })\n    .then (res => {\n      if(res.status === 200) {\n        console.log('🥡 fetch index dishes successful! 🥡')\n        return res.json()\n      } else {\n        console.log('fetch index dishes failed...💣')\n        return[]\n      }\n    })\n    .then(data => {\n      this.setState({\n        dishes: data.data\n      })\n      // console.log('new data: ' + JSON.stringify(data.data))\n    })\n  }\n\n  getOrders = () => {\n    console.log('hit getOrders')\n    fetch(baseUrl + '/orders/', {\n      credentials: 'include'\n    })\n    .then (res => {\n      if(res.status === 200) {\n        console.log('📝 fetch index orders successful! 📝')\n        return res.json()\n      } else {\n        console.log('fetch index orders failed...💣')\n        return[]\n      }\n    })\n    .then(data => {\n      this.setState({\n        orders: data.data\n      })\n      console.log('new data: ' + JSON.stringify(data.data))\n    })\n  }\n\n  newOrder = async () => {\n    console.log('hit newOrder')\n\n    try{\n      const response = await fetch(baseUrl + '/orders/', {\n        method: 'POST',\n        body: JSON.stringify({\n          total: 0.0,\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }, \n        credentials: 'include'\n      })\n      \n      console.log(response.status)\n\n      if(response.status === 201){\n        console.log('new order created!')\n        const newOrder = await response.json()\n        console.log('new order :' + newOrder)\n        this.getOrders()\n        const copyOrders = [...this.state.orders]\n        copyOrders.push(newOrder)\n        this.setState({\n          orders: copyOrders,\n          currentOrderId: newOrder.data.id,\n          orderOpen: true,\n        })\n        console.log('newOrder: ' + JSON.stringify(newOrder))\n        console.log('newOrderID: ' + JSON.stringify(newOrder.data.id))\n      }\n    }\n    catch(err){\n      console.log('Error -> ', err)\n      console.log('order not created...')\n    }\n    \n  }\n\n  sumOrderedDishPrices = () => {\n    \n  const dishes = this.state.orderedDishes\n  const total = dishes.reduce((total, obj) => obj.dish.price + total, 0)\n  console.log(total)\n\n  this.setState({\n    currentOrderTotal: total,\n  })\n}\n\n  subOrderedDishPrices = (id) => {\n    const findIndex = this.state.orderedDishes.findIndex(orderedDish => orderedDish.id === id)\n    const orderedDish = this.state.orderedDishes[findIndex]\n    console.log(`orderedDish.dish.price: ${JSON.stringify(orderedDish.dish.price)}`)\n    const currentTotal = this.state.currentOrderTotal\n    const newTotal = currentTotal - orderedDish.dish.price\n    this.setState({\n      currentOrderTotal: newTotal,\n    })\n\n  }\n\n  addDishToOrder =(order_id, dish_id)=> {\n    console.log( 'order id:',order_id, 'dish id:',dish_id)\n    if(!this.state.userLoggedIn){\n      alert('❌ You must log in first to create an order. ❌')\n      this.setState({\n        loginOpen: true,\n      })\n    } else {\n      fetch(baseUrl + '/ordered_dishes/' + order_id + '/' + dish_id + '/', {\n        method: 'POST',\n        credentials: 'include',\n      })\n      .then(res => {\n        if(res.status === 200){\n          console.log('dish added to order!')\n          return res.json()\n        } else {\n          console.log('dish was not added...')\n          return []\n        }\n      })\n      .then(data => {\n        console.log(data)\n        const copyOrderedDishes = [...this.state.orderedDishes, data.data]\n        console.log(copyOrderedDishes[copyOrderedDishes.length-1])\n\n\n        this.setState({\n          currentOrderId: order_id,\n          orderedDishes: copyOrderedDishes,\n          currentOrderedDishId: copyOrderedDishes[copyOrderedDishes.length-1].id,\n          currentOrderTotal: null,\n        })\n      })\n      .then(()=>{\n        this.sumOrderedDishPrices()\n      })\n    }\n\n  }\n\n   updateOrderedDish = (order_id, dish_id, ordered_dish_id) => {\n    console.log(`order id: ${order_id}, dish id: ${dish_id}, ordered_dish_id: ${ordered_dish_id}` )\n\n    fetch(baseUrl + '/ordered_dishes/' + order_id + '/' + dish_id + '/' + ordered_dish_id, { \n      method: 'PUT',\n      credentials: 'include'\n    })\n\n    .then(res => {\n      if(res.status === 200){\n        console.log('ordered dish updated!')\n        return res.json()\n      } else {\n        console.log('dish was not updated...')\n        return []\n      }\n    })\n\n    .then(data => {\n      const updatedOrderedDish = data.data\n      console.log(updatedOrderedDish)\n      const findIndex = this.state.orderedDishes.findIndex(orderedDish => orderedDish.id === updatedOrderedDish.id)\n      const copyOrderedDishes = [...this.state.orderedDishes]\n      copyOrderedDishes[findIndex] = updatedOrderedDish\n      this.setState({\n        orderedDishes: copyOrderedDishes\n      })\n    })\n  }\n\n  deleteOrderedDish = (id) => {\n    console.log(id)\n    this.subOrderedDishPrices(id)\n    fetch(baseUrl + '/ordered_dishes/' + id + '/', {\n      method: 'DELETE',\n    })\n    .then(res => {\n      console.log(res)\n      const findIndex = this.state.orderedDishes.findIndex(orderedDish => orderedDish.id === id)\n      const copyOrderedDishes = [...this.state.orderedDishes]\n      copyOrderedDishes.splice(findIndex, 1)\n      this.setState({\n        orderedDishes: copyOrderedDishes,\n      })\n    })\n  }\n\n  toggleLogo = () => {\n    this.setState({\n      logoOpen: !this.state.logoOpen,\n    }, ()=>console.log('logoOpen after set state: ' + this.state.logoOpen)\n    )\n    console.log('toggleLogo clicked')\n  }\n\n\n  toggleRegisterForm = () => {\n    this.setState({\n      registerOpen: !this.state.registerOpen,\n      loginOpen: false,\n    }, ()=>console.log('registerOpen after set state: ' + this.state.registerOpen)\n    )\n    console.log('toggleRegisterForm clicked')\n  }\n\n  toggleLoginForm = () => {\n    this.setState({\n      loginOpen: !this.state.loginOpen,\n    }, ()=>console.log('loginOpen after set state: ' + this.state.loginOpen)\n    )\n    console.log('toggleLoginForm clicked')\n  }\n  \n  toggleOrderForm = () => {\n    this.setState({\n      orderOpen: !this.state.orderOpen,\n    }, ()=>console.log('orderOpen after set state: ' + this.state.orderOpen)\n    )\n    console.log('toggleOrderForm clicked')\n  }\n  \n  togglePaymentForm = () => {\n    this.setState({\n      paymentOpen: !this.state.paymentOpen,\n    }, ()=>console.log('paymentOpen after set state: ' + this.state.paymentOpen)\n    )\n    console.log('togglePaymentForm clicked')\n  }\n\n  checkout = () => {\n    console.log('hit checkout button!')\n  }\n  \n  componentDidMount(){\n    this.getDishes()\n  }\n  \n  render(){\n    \n    return (\n      <div className=\"App\">\n      <Payment\n        currentOrderTotal={this.state.currentOrderTotal}\n        paymentOpen={this.state.paymentOpen}\n        togglePaymentForm={this.togglePaymentForm}\n       />\n      <Nav \n        toggleRegisterForm={this.toggleRegisterForm}\n        registerOpen={this.state.registerOpen}\n        toggleLoginForm={this.toggleLoginForm}\n        loginOpen={this.state.loginOpen}\n        toggleOrderForm={this.toggleOrderForm}\n        orderOpen={this.state.orderOpen}\n        logoutUser={this.logoutUser}\n        userLoggedIn={this.state.userLoggedIn}\n      />\n      <Logo \n        logoOpen={this.state.logoOpen}\n      />\n\n      <Register \n        register={this.register}\n        registerOpen={this.state.registerOpen}\n        toggleRegisterForm={this.toggleRegisterForm}\n      />\n      <Login \n        loginUser={this.loginUser}\n        loginOpen={this.state.loginOpen}\n        registerOpen={this.state.registerOpen}\n        toggleRegisterForm={this.toggleRegisterForm}\n        toggleLogo={this.toggleLogo}\n        toggleLoginForm={this.toggleLoginForm}\n\n      />\n\n      <div className=\"bottom-container\">\n        <Menu \n          dishes = {this.state.dishes}\n          currentOrderId = {this.state.currentOrderId}\n          addDishToOrder = {this.addDishToOrder}\n        />\n        <Order \n          username={this.state.username}\n          orderOpen={this.state.orderOpen}\n          orderedDishes={this.state.orderedDishes}\n          orderedDishQty={this.state.orderedDishQty}\n          currentOrderId={this.state.currentOrderId}\n          orders={this.state.orders}\n          currentOrderTotal={this.state.currentOrderTotal}\n          deletedOrderedDish={this.deleteOrderedDish}\n          togglePaymentForm={this.togglePaymentForm}\n        />\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}