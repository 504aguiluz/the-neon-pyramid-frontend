{"ast":null,"code":"var _jsxFileName = \"/Users/MattAguiluz/sei-bromeliad/projects/Project4_neon-pyramid/the-neon-pyramid-frontend/the-neon-pyramid-frontend/neon-pyramid/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport Register from './components/Register';\nimport Login from './components/Login';\nimport Logo from './components/Logo';\nimport Nav from './components/Nav';\nimport Menu from './components/Menu'; // import Dish from './components/Dish';\n\nimport Order from './components/Order'; // import Payment from './components/Payment';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet baseUrl = process.env.REACT_APP_BASEURL;\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.register = async e => {\n      e.preventDefault();\n\n      try {\n        const response = await fetch(baseUrl + '/users/register', {\n          method: 'POST',\n          body: JSON.stringify({\n            email: e.target.email.value,\n            username: e.target.username.value,\n            password: e.target.password.value,\n            phone_num: e.target.phone_num.value,\n            address: e.target.address.value,\n            payment_info: {\n              cc_num: e.target.payment_info.cc_num.value,\n              cc_exp: e.target.payment_info.cc_exp.value,\n              cc_sec_code: e.target.payment_info.cc_sec_code.value\n            }\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (response.status === 200) {\n          this.getDishes(); // this.getOrders()\n        }\n      } catch (err) {\n        console.log('Error => ', err);\n        console.log('ðŸ˜– register failed ðŸ˜–');\n      }\n    };\n\n    this.loginUser = async e => {\n      e.preventDefault();\n      const loginBody = {\n        username: e.target.username.value,\n        password: e.target.password.value\n      };\n\n      try {\n        const response = await fetch(baseUrl + 'users/login', {\n          method: 'POST',\n          body: JSON.stringify(loginBody),\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        });\n        console.log(response);\n        console.log('BODY: ', response.body);\n\n        if (response.status === 200) {\n          this.getDishes(); // this.getOrders()\n\n          console.log('ðŸ¥³ login successful! ðŸ¥³');\n          this.setState({\n            // need to populate the rest of state for users\n            username: e.target.username.value,\n            password: e.target.password.value,\n            userLoggedIn: true\n          });\n        }\n      } catch (err) {\n        console.log('Error => ', err);\n        console.log('ðŸ˜– login failed ðŸ˜–');\n      }\n    };\n\n    this.logoutUser = () => {\n      console.log('hit logout button');\n      fetch(baseUrl + '/users/logout', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      }).then(res => {\n        console.log(res.status);\n        console.log('ðŸ§¨ logout successful! ðŸ§¨');\n        this.setState({\n          userLoggedIn: false\n        });\n      });\n      console.log(this.state);\n    };\n\n    this.getDishes = () => {\n      console.log('hit getDishes');\n      fetch(baseUrl + '/dishes/', {\n        credentials: 'include'\n      }).then(res => {\n        if (res.status === 200) {\n          console.log('ðŸ¥¡ fetch index dishes successful! ðŸ¥¡');\n          return res.json();\n        } else {\n          console.log('fetch index dishes failed...ðŸ’£');\n          return [];\n        }\n      }).then(data => {\n        console.log('data: ' + data);\n        this.setState({\n          dishes: data.data\n        });\n        console.log('new data: ' + data);\n      });\n    };\n\n    this.newOrder = async () => {\n      console.log('hit newOrder');\n\n      try {\n        const response = await fetch(baseUrl + '/orders/', {\n          method: 'POST',\n          body: JSON.stringify({\n            total: 0.0\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        });\n        console.log(response.status);\n\n        if (response.status === 201) {\n          console.log('new order created!');\n          const newOrder = await response.json();\n          console.log('new order :' + newOrder);\n          const copyOrders = [...this.state.orders];\n          copyOrders.push(newOrder);\n          this.setState({\n            orders: copyOrders,\n            currentOrderId: newOrder.id,\n            currentOrder: newOrder\n          });\n        }\n      } catch (err) {\n        console.log('Error -> ', err);\n        console.log('order not created...');\n      }\n    };\n\n    this.addDishToOrder = dish_id => {\n      console.log('dish id: ' + dish_id, 'order id :' + this.currentOrderId);\n\n      if (this.currentOrderId === undefined) {\n        this.newOrder();\n        console.log('order created: ' + this.state.currentOrder);\n      } else {\n        console.log('existing order: ' + this.state.currentOrder);\n      }\n\n      const copyOrders = [...this.state.orders];\n      const dishToAdd = this.state.dishes.find(dish => dish.dish_id === dish_id);\n      console.log(dishToAdd);\n      copyOrders.push(dishToAdd);\n      this.setState({\n        orders: copyOrders,\n        currentOrder: copyOrders[copyOrders.length - 1]\n      });\n      console.log('current order: ' + this.state.currentOrder);\n    };\n\n    this.state = {\n      username: '',\n      password: '',\n      email: '',\n      phone_num: '',\n      address: '',\n      payment_info: {},\n      userLoggedIn: false,\n      modalOpen: false,\n      orders: [],\n      dishes: [],\n      currentOrder: {},\n      currentOrderId: null\n    };\n  }\n\n  componentDidMount() {\n    this.getDishes();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Register, {\n        register: this.register\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Login, {\n        loginUser: this.loginUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-container\",\n        children: [/*#__PURE__*/_jsxDEV(Menu, {\n          dishes: this.state.dishes,\n          newOrder: this.newOrder,\n          addDishToOrder: this.addDishToOrder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Order, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/MattAguiluz/sei-bromeliad/projects/Project4_neon-pyramid/the-neon-pyramid-frontend/the-neon-pyramid-frontend/neon-pyramid/src/App.js"],"names":["React","Component","Register","Login","Logo","Nav","Menu","Order","baseUrl","process","env","REACT_APP_BASEURL","App","constructor","register","e","preventDefault","response","fetch","method","body","JSON","stringify","email","target","value","username","password","phone_num","address","payment_info","cc_num","cc_exp","cc_sec_code","headers","status","getDishes","err","console","log","loginUser","loginBody","credentials","setState","userLoggedIn","logoutUser","then","res","state","json","data","dishes","newOrder","total","copyOrders","orders","push","currentOrderId","id","currentOrder","addDishToOrder","dish_id","undefined","dishToAdd","find","dish","length","modalOpen","componentDidMount","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport Register from './components/Register';\nimport Login from './components/Login';\nimport Logo from './components/Logo';\nimport Nav from './components/Nav';\nimport Menu from './components/Menu';\n// import Dish from './components/Dish';\nimport Order from './components/Order';\n// import Payment from './components/Payment';\n\n\nlet baseUrl = process.env.REACT_APP_BASEURL\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      username: '',\n      password: '',\n      email: '',\n      phone_num: '',\n      address: '',\n      payment_info: {},\n      userLoggedIn: false,\n      modalOpen: false,\n      orders: [],\n      dishes: [],\n      currentOrder: {},\n      currentOrderId: null,\n    }\n  }\n\n  register = async (e) => {\n    e.preventDefault()\n    try{\n      const response = await fetch(baseUrl + '/users/register', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: e.target.email.value,\n          username: e.target.username.value,\n          password: e.target.password.value,\n          phone_num: e.target.phone_num.value,\n          address: e.target.address.value,\n          payment_info : {\n            cc_num: e.target.payment_info.cc_num.value,\n            cc_exp: e.target.payment_info.cc_exp.value,\n            cc_sec_code: e.target.payment_info.cc_sec_code.value,\n          }\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      if (response.status === 200) {\n        this.getDishes()\n        // this.getOrders()\n      }\n    }\n    catch(err) {\n      console.log('Error => ', err)\n      console.log('ðŸ˜– register failed ðŸ˜–')\n    }\n  }\n\n  loginUser = async (e) => {\n    e.preventDefault()\n    const loginBody = {\n      username: e.target.username.value,\n      password: e.target.password.value,\n    }\n\n    try {\n      const response = await fetch(baseUrl + 'users/login', {\n        method: 'POST',\n        body: JSON.stringify(loginBody),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      })\n\n      console.log(response)\n      console.log('BODY: ', response.body)\n\n      if(response.status === 200){\n        this.getDishes()\n        // this.getOrders()\n        console.log('ðŸ¥³ login successful! ðŸ¥³')\n        this.setState({\n          // need to populate the rest of state for users\n          username: e.target.username.value,\n          password: e.target.password.value,\n          userLoggedIn: true,\n          })\n      }\n    }\n    catch(err){\n      console.log('Error => ', err)\n      console.log('ðŸ˜– login failed ðŸ˜–')\n    }\n  }\n\n  logoutUser = () => {\n    console.log('hit logout button')\n    fetch(baseUrl + '/users/logout', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    })\n    .then(res => {\n      console.log(res.status)\n      console.log('ðŸ§¨ logout successful! ðŸ§¨')\n      this.setState({\n        userLoggedIn: false\n      })\n    })\n    console.log(this.state)\n  }\n\n  getDishes = () => {\n    console.log('hit getDishes')\n    fetch(baseUrl + '/dishes/', {\n      credentials: 'include'\n    })\n    .then (res => {\n      if(res.status === 200) {\n        console.log('ðŸ¥¡ fetch index dishes successful! ðŸ¥¡')\n        return res.json()\n      } else {\n        console.log('fetch index dishes failed...ðŸ’£')\n        return[]\n      }\n    })\n    .then(data => {\n      console.log('data: ' + data)\n      this.setState({\n        dishes: data.data\n      })\n      console.log('new data: ' + data)\n    })\n  } \n\n  newOrder = async () => {\n    console.log('hit newOrder')\n\n    try{\n      const response = await fetch(baseUrl + '/orders/', {\n        method: 'POST',\n        body: JSON.stringify({\n          total: 0.0,\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }, \n        credentials: 'include'\n      })\n      \n      console.log(response.status)\n\n      if(response.status === 201){\n        console.log('new order created!')\n        const newOrder = await response.json()\n        console.log('new order :' + newOrder)\n        const copyOrders = [...this.state.orders]\n        copyOrders.push(newOrder)\n        this.setState({\n          orders: copyOrders,\n          currentOrderId: newOrder.id,\n          currentOrder: newOrder,\n        })\n      }\n    }\n    catch(err){\n      console.log('Error -> ', err)\n      console.log('order not created...')\n    }\n\n  }\n\n  addDishToOrder =(dish_id)=> {\n    console.log('dish id: ' + dish_id,'order id :' + this.currentOrderId)\n    \n    if(this.currentOrderId === undefined){\n      this.newOrder()\n      console.log('order created: ' + this.state.currentOrder)\n    } else {\n      console.log('existing order: ' + this.state.currentOrder)\n    }\n      const copyOrders = [...this.state.orders]\n      const dishToAdd = this.state.dishes.find(dish => dish.dish_id === dish_id)\n      console.log(dishToAdd)\n      copyOrders.push(dishToAdd)\n      this.setState({\n        orders: copyOrders,\n        currentOrder: copyOrders[copyOrders.length -1],\n      })\n      console.log('current order: ' + this.state.currentOrder)\n\n  }\n\n  componentDidMount(){\n    this.getDishes()\n  }\n  \n  render(){\n\n    \n    return (\n      <div className=\"App\">\n      <Nav />\n      <Logo />\n      <Register \n        register={this.register}\n      />\n      <Login \n        loginUser={this.loginUser}\n      />\n\n      <div className=\"bottom-container\">\n        <Menu \n          dishes = {this.state.dishes}\n          newOrder = {this.newOrder}\n          addDishToOrder = {this.addDishToOrder}\n        />\n        <Order />\n      </div>\n      {/* <Dish /> */}\n      {/* <Payment /> */}\n    </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}